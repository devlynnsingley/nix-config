#!/usr/bin/env bash

set -e

# jww (2020-04-01): I use this to keep build products in a separate directory
# tree.
PRODUCTS=""
if [[ -d $HOME/Products ]]; then
    PRODUCTS=$(echo $PWD | sed -E 's/\b(kadena|src)\b/Products/')
    echo "There is a ~/Products directory"
fi

NOCACHE=false
if [[ "$1" == "--no-cache" ]]; then
    shift 1
    NOCACHE=true
    echo "Disabling use of the Nix cache"
fi

NIXOPTS=(--cores 4)
NIXOPTS_MORE=()

if [[ $PWD =~ kadena ]]; then
    if [[ $NOCACHE == false ]]; then
        echo Building direnv cache for a Kadena project...
        NIXOPTS+=(--option build-use-substitutes true)
        NIXOPTS+=(--extra-substituters 'https://nixcache.chainweb.com')
        NIXOPTS+=(--extra-trusted-public-keys 'nixcache.chainweb.com:FVN503ABX9F8x8K0ptnc99XEz5SaA4Sks6kNcZn2pBY=')
        NIXOPTS+=(--extra-substituters 'http://nixcache.kadena.io')
        NIXOPTS+=(--extra-trusted-public-keys 'kadena-cache.local-1:8wj8JW8V9tmc5bgNNyPM18DYNA1ws3X/MChXh1AQy/Q=')
        NIXOPTS+=(--extra-substituters 'https://open-source.nixcache.obsidian.systems')
        NIXOPTS+=(--extra-trusted-public-keys 'obsidian-open-source:KP1UbL7OIibSjFo9/2tiHCYLm/gJMfy8Tim7+7P4o0I=')
        NIXOPTS+=(--extra-substituters 'https://cache.nixos.org')
        NIXOPTS+=(--extra-trusted-public-keys 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=')
    fi
else
    echo "Using the package set for <darwin>"
    NIXOPTS_MORE+=(--arg pkgs '(import<darwin>{}).pkgs')
fi

if [[ -n ${CACHE+x} && $NOCACHE == false ]]; then
    if [[ ! ($NIXOPTS =~ build-use-substitutes) ]]; then
        NIXOPTS+=(--option build-use-substitutes true)
    fi
    NIXOPTS+=(--option substituters "ssh://${CACHE}")
    echo "Using substitutor: ssh://${CACHE}"
fi

if [[ -n ${BUILDER+x} ]]; then
    NIXOPTS+=(--option builders "ssh://${BUILDER}")
    echo "Using builder: ssh://${CACHE}"
fi

if [[ ! -f .envrc ]]; then
    cat > .envrc <<'EOF'
keep_vars() {
    local v
    for k in $@; do
        eval "v=\$$k"
        DIRENV_kept="$DIRENV_kept"$(printf "%s=%s\000" "$k" "$v" | base64)
    done
}

reset_kept() {
    : ${DIRENV_kept?No environment stored. Missing keep_except()?}
    echo "$DIRENV_kept" | base64 -d | while IFS= read -r -d '' V; do
        echo "export ${V%%=*}='${V#*=}'"
    done
    unset DIRENV_kept
}

keep_vars             \
    ALTERNATE_EDITOR  \
    EDITOR            \
    EMACS_SERVER_FILE \
    ITERM_SESSION_ID  \
    SECURITYSESSIONID \
    SSH_AUTH_SOCK     \
    SSL_CERT_FILE     \
    TERM              \
    TERM_SESSION_ID

source <(direnv apply_dump .envrc.cache)
source <(reset_kept)

watch_file .envrc
watch_file .envrc.cache
watch_file default.nix
EOF

    [[ -f package.nix ]] && echo "watch_file package.nix" >> .envrc
    [[ -f shell.nix ]] && echo "watch_file shell.nix" >> .envrc

    if [[ -n "$PRODUCTS" ]]; then
        if [[ -f package.yaml \
           || -n "$(find . -maxdepth 1 -name '*.cabal')" ]]; then
            cat >> .envrc <<EOF

export CABAL_BUILDDIR=$PRODUCTS/dist
EOF
        fi

        if [[ -f Cargo.toml || -f ../Cargo.toml ]]; then
            cat >> .envrc <<EOF

export CARGO_TARGET_DIR=$PRODUCTS/target
export CARGO_HOME=\$CARGO_TARGET_DIR/.cargo-home
# export RUSTUP_HOME=\$CARGO_TARGET_DIR/.rustup-home
# export RUSTUP_TOOLCHAIN=1.60.0-x86_64-apple-darwin
export RUSTC_WRAPPER=$(which sccache)
export PATH=\$PATH:\$CARGO_HOME/bin
export PATH=\$PATH:\$CARGO_TARGET_DIR/x86_64-apple-darwin/debug
export PATH=\$PATH:\$CARGO_TARGET_DIR/x86_64-apple-darwin/release
EOF
        fi
    fi
fi

nix-shell "${NIXOPTS[@]}" "$@" -Q "${NIXOPTS_MORE[@]}" --run "\
unset                 \
    ALTERNATE_EDITOR  \
    EDITOR            \
    EMACS_SERVER_FILE \
    ITERM_SESSION_ID  \
    SECURITYSESSIONID \
    SSH_AUTH_SOCK     \
    SSL_CERT_FILE     \
    TERM              \
    TERM_SESSION_ID;  \
direnv dump > .envrc.cache"

identify_shell() {
    local shell="shell.nix"
    if [[ -n "$NIXFILE" && -f "${NIXFILE}" ]]; then
        shell="$NIXFILE"
    elif [[ ! -f "${shell}" ]]; then
        shell="default.nix"
    fi

    if [[ ! -f "${shell}" ]]; then
        echo "use nix: shell.nix or default.nix not found in the folder"
        exit 1
    fi
    echo "${shell}"
}

build_drv() {
    local dir="${PWD}"/.direnv
    local default="${dir}/default"
    local shell=$(identify_shell)
    if [[ ! -L "${default}" ]] || [[ ! -d `readlink "${default}"` ]]; then
        local wd="${dir}/env-`md5sum "${shell}" | cut -c -32`"
        mkdir -p "${wd}"

        local drv="${wd}/env.drv"
        if [[ ! -f "${drv}" ]]; then
            IN_NIX_SHELL=1 nix-instantiate                                      \
                "${NIXOPTS[@]}" "${NIXOPTS_MORE[@]}" "${NIXARGS[@]}"            \
                --add-root "${drv}" --indirect "${shell}" > /dev/null
            nix-store "${NIXOPTS[@]}"                                           \
                -r `nix-store "${NIXOPTS[@]}" --query --references "${drv}"`    \
                --add-root "${wd}/dep" --indirect > /dev/null
        fi

        rm -f "${default}"
        ln -s `basename "${wd}"` "${default}"
    fi

    local drv=`readlink "${default}/env.drv"`
    echo "${drv}"
}

export NIXOPTS
export NIXOPTS_MORE
export NIXARGS

build_drv

direnv reload
